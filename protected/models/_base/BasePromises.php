<?php

/**
 * This is the model base class for the table "promises".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Promises".
 *
 * Columns in table "promises" available as properties of the model,
 * followed by relations of table "promises" available as properties of the model.
 *
 * @property string $idPromise
 * @property double $value
 * @property string $dPromise
 * @property string $dCreation
 * @property string $idWallet
 * @property string $idAdviser
 *
 * @property Advisers $idAdviser0
 * @property Wallets $idWallet0
 */
abstract class BasePromises extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'promises';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Promises|Promises', $n);
	}

	public static function representingColumn() {
		return 'dPromise';
	}

	public function rules() {
		return array(
			array('value, dPromise, idWallet, idAdviser', 'required'),
			array('value', 'numerical'),
			array('idWallet, idAdviser', 'length', 'max'=>20),
			array('dCreation', 'safe'),
			array('dCreation', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idPromise, value, dPromise, dCreation, idWallet, idAdviser', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idAdviser0' => array(self::BELONGS_TO, 'Advisers', 'idAdviser'),
			'idWallet0' => array(self::BELONGS_TO, 'Wallets', 'idWallet'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idPromise' => Yii::t('app', 'Id Promise'),
			'value' => Yii::t('app', 'Value'),
			'dPromise' => Yii::t('app', 'D Promise'),
			'dCreation' => Yii::t('app', 'D Creation'),
			'idWallet' => null,
			'idAdviser' => null,
			'idAdviser0' => null,
			'idWallet0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idPromise', $this->idPromise, true);
		$criteria->compare('value', $this->value);
		$criteria->compare('dPromise', $this->dPromise, true);
		$criteria->compare('dCreation', $this->dCreation, true);
		$criteria->compare('idWallet', $this->idWallet);
		$criteria->compare('idAdviser', $this->idAdviser);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}