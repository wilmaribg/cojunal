<?php

/**
 * This is the model base class for the table "wallets".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Wallets".
 *
 * Columns in table "wallets" available as properties of the model,
 * followed by relations of table "wallets" available as properties of the model.
 *
 * @property string $idWallet
 * @property string $idNumber
 * @property double $capitalValue
 * @property double $feeValue
 * @property double $interestsValue
 * @property string $dAssigment
 * @property string $dUpdate
 * @property string $legalName
 * @property string $address
 * @property string $phone
 * @property string $email
 * @property string $idDistrict
 * @property string $idStatus
 * @property string $product
 * @property string $idAdviser
 * @property double $currentDebt
 * @property double $titleValue
 * @property string $validThrough
 * @property string $accountNumber
 * @property string $negotiation
 * @property string $vendorEmail
 * @property string $vendorName
 * @property string $vendorPhone
 *
 * @property Agendas[] $agendases
 * @property Assets[] $assets
 * @property Comments[] $comments
 * @property Demographics[] $demographics
 * @property Payments[] $payments
 * @property Promises[] $promises
 * @property Tasks[] $tasks
 * @property Districts $idDistrict0
 * @property Status $idStatus0
 * @property Advisers $idAdviser0
 */
abstract class BaseWallets extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'wallets';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cartera|Carteras', $n);
	}

	public static function representingColumn() {
		return 'idNumber';
	}

	public function rules() {
		return array(
			array('idNumber, capitalValue, feeValue, interestsValue, dAssigment, legalName, address, phone, email, idDistrict, idStatus, product, idAdviser, validThrough, accountNumber', 'required'),
			array('capitalValue, feeValue, interestsValue, currentDebt, titleValue', 'numerical'),
			array('idNumber, phone, vendorPhone', 'length', 'max'=>45),
			array('legalName, address, negotiation', 'length', 'max'=>255),
			array('email, accountNumber', 'length', 'max'=>55),
			array('idDistrict, idStatus, idAdviser', 'length', 'max'=>20),
			array('product, vendorEmail, vendorName', 'length', 'max'=>155),
			array('dUpdate', 'safe'),
			array('dUpdate, currentDebt, titleValue, negotiation, vendorEmail, vendorName, vendorPhone', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idWallet, idNumber, capitalValue, feeValue, interestsValue, dAssigment, dUpdate, legalName, address, phone, email, idDistrict, idStatus, product, idAdviser, currentDebt, titleValue, validThrough, accountNumber, negotiation, vendorEmail, vendorName, vendorPhone', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'agendases' => array(self::HAS_MANY, 'Agendas', 'idWallet'),
			'assets' => array(self::HAS_MANY, 'Assets', 'idWallet'),
			'comments' => array(self::HAS_MANY, 'Comments', 'idWallet'),
			'demographics' => array(self::HAS_MANY, 'Demographics', 'idWallet'),
			'payments' => array(self::HAS_MANY, 'Payments', 'idWallet'),
			'promises' => array(self::HAS_MANY, 'Promises', 'idWallet'),
			'tasks' => array(self::HAS_MANY, 'Tasks', 'idWallet'),
			'idDistrict0' => array(self::BELONGS_TO, 'Districts', 'idDistrict'),
			'idStatus0' => array(self::BELONGS_TO, 'Status', 'idStatus'),
			'idAdviser0' => array(self::BELONGS_TO, 'Advisers', 'idAdviser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idWallet' => Yii::t('app', 'Id Wallet'),
			'idNumber' => Yii::t('app', 'Identificación'),
			'capitalValue' => Yii::t('app', 'Capital'),
			'feeValue' => Yii::t('app', 'Cuota'),
			'interestsValue' => Yii::t('app', 'Intereses'),
			'dAssigment' => Yii::t('app', 'Fecha de asignación'),
			'dUpdate' => Yii::t('app', 'Fecha de actualización'),
			'legalName' => Yii::t('app', 'Nombre'),
			'address' => Yii::t('app', 'Dirección'),
			'phone' => Yii::t('app', 'Telefono'),
			'email' => Yii::t('app', 'Correo'),
			'idDistrict' => null,
			'idStatus' => null,
			'product' => Yii::t('app', 'Producto'),
			'idAdviser' => null,
			'currentDebt' => Yii::t('app', 'Deuda Actual'),
			'titleValue' => Yii::t('app', 'Título valor'),
			'validThrough' => Yii::t('app', 'Valor Comisión'),
			'accountNumber' => Yii::t('app', 'Cuenta'),
			'negotiation' => Yii::t('app', 'Negociación'),
			'vendorEmail' => Yii::t('app', 'Email Proveedor'),
			'vendorName' => Yii::t('app', 'Nombre Proveedor'),
			'vendorPhone' => Yii::t('app', 'Telefono'),
			'agendases' => null,
			'assets' => null,
			'comments' => null,
			'demographics' => null,
			'payments' => null,
			'promises' => null,
			'tasks' => null,
			'idDistrict0' => null,
			'idStatus0' => null,
			'idAdviser0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idWallet', $this->idWallet, true);
		$criteria->compare('idNumber', $this->idNumber, true);
		$criteria->compare('capitalValue', $this->capitalValue);
		$criteria->compare('feeValue', $this->feeValue);
		$criteria->compare('interestsValue', $this->interestsValue);
		$criteria->compare('dAssigment', $this->dAssigment, true);
		$criteria->compare('dUpdate', $this->dUpdate, true);
		$criteria->compare('legalName', $this->legalName, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('idDistrict', $this->idDistrict);
		$criteria->compare('idStatus', $this->idStatus);
		$criteria->compare('product', $this->product, true);
		$criteria->compare('idAdviser', $this->idAdviser);
		$criteria->compare('currentDebt', $this->currentDebt);
		$criteria->compare('titleValue', $this->titleValue);
		$criteria->compare('validThrough', $this->validThrough, true);
		$criteria->compare('accountNumber', $this->accountNumber, true);
		$criteria->compare('negotiation', $this->negotiation, true);
		$criteria->compare('vendorEmail', $this->vendorEmail, true);
		$criteria->compare('vendorName', $this->vendorName, true);
		$criteria->compare('vendorPhone', $this->vendorPhone, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}