<?php

/**
 * This is the model base class for the table "campaigns".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Campaigns".
 *
 * Columns in table "campaigns" available as properties of the model,
 * followed by relations of table "campaigns" available as properties of the model.
 *
 * @property string $idCampaign
 * @property string $name
 * @property string $companyName
 * @property string $idNumber
 * @property string $address
 * @property string $contactName
 * @property string $contactEmail
 * @property string $comments
 * @property string $fCreacion
 * @property string $dUpdate
 * @property string $passwd
 * @property string $idAdviser
 * @property string $idDistrict
 *
 * @property Advisers $idAdviser0
 * @property Districts $idDistrict0
 * @property WalletsHasCampaigns[] $walletsHasCampaigns
 */
abstract class BaseCampaigns extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'campaigns';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Campañas|Campañas', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, companyName, idNumber, address, contactName, contactEmail, fCreacion, dUpdate, passwd, idAdviser, idDistrict, phone, percentageCommission, interest, fees', 'required'),
			array('name, idNumber, contactName, passwd', 'length', 'max'=>45),
			array('companyName', 'length', 'max'=>55),
			array('address', 'length', 'max'=>255),
			array('contactEmail', 'length', 'max'=>155),
			array('idAdviser, idDistrict', 'length', 'max'=>20),
			array('comments', 'safe'),
			array('contactEmail', 'email'),
			array('comments', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idCampaign, name, companyName, idNumber, address, contactName, contactEmail, comments, fCreacion, dUpdate, passwd, idAdviser, idDistrict', 'safe', 'on'=>'search'),
			array('contactEmail', 'email'),
			array('phone', 'numerical', 'integerOnly'=>true, 'min'=>0),
			array('active', 'default', 'setOnEmpty' => true, 'value' => null),
		);
	}

	public function relations() {
		return array(
			'idAdviser0' => array(self::BELONGS_TO, 'Advisers', 'idAdviser'),
			'idDistrict0' => array(self::BELONGS_TO, 'Districts', 'idDistrict'),
			'walletsHasCampaigns' => array(self::HAS_MANY, 'WalletsHasCampaigns', 'idCampaign'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idCampaign' => Yii::t('app', 'Id Campaign'),
			'name' => Yii::t('app', 'Nombre Campaña'),
			'companyName' => Yii::t('app', 'Nombre de empresa'),
			'idNumber' => Yii::t('app', 'CC / NIT'),
			'address' => Yii::t('app', 'Dirección'),
			'contactName' => Yii::t('app', 'Nombre de Contacto'),
			'contactEmail' => Yii::t('app', 'E-mail'),
			'comments' => Yii::t('app', 'Comentarios'),
			'fCreacion' => Yii::t('app', 'Fecha de Creación'),
			'dUpdate' => Yii::t('app', 'Fecha de actualización'),
			'passwd' => Yii::t('app', 'Clave'),
			'active' => Yii::t('app', 'Activo'),
			'phone' => Yii::t('app', 'Teléfono'),
			'idAdviser' => null,
			'idDistrict' => null,
			'idAdviser0' => null,
			'idDistrict0' => null,
			'walletsHasCampaigns' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idCampaign', $this->idCampaign, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('companyName', $this->companyName, true);
		$criteria->compare('idNumber', $this->idNumber, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('contactName', $this->contactName, true);
		$criteria->compare('contactEmail', $this->contactEmail, true);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('fCreacion', $this->fCreacion, true);
		$criteria->compare('dUpdate', $this->dUpdate, true);
		$criteria->compare('passwd', $this->passwd, true);
		$criteria->compare('idAdviser', $this->idAdviser);
		$criteria->compare('idDistrict', $this->idDistrict);
		$criteria->compare('active', $this->active);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}